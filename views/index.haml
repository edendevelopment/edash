!!!
%html
  %head
    %title= "CI Dashboard"
    %script{:type => "text/javascript", :src => "http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"}
    %script{:type => "text/javascript", :src => "#{path_root}/javascripts/queue.js"}
    :javascript
      function runQueueIn(count) {
        window.setTimeout("queue.process()", count);
      }

      function createNewBoxFrom(box, project) {
        return box.clone();
      }

      function syncBoxToProject(newbox, project) {
        newbox.removeClass();
        newbox.addClass(project.status);
        if (project.status == 'building') {
          newbox.find('img').attr('src', '#{path_root}/images/loading.gif');
        }
        else {
          newbox.find('img').attr('src', project.author_gravatar);
        }
        return newbox;
      }

      function fadeOver(newelement, element) {
        newelement.css('position', 'absolute');
        newelement.css('left', '0');
        newelement.hide();
        newelement.appendTo(element.parent());
        newelement.fadeIn(2000, function() {
          newelement.css('position', 'static');
          element.remove();
          queue.schedule(500);
        });
        element.fadeOut(2000);
      }      

      function updateBuildStatus(project) {
        box = $('#'+project.name+' a');
        if (box.size() == 0) {
          document.location.reload(true);
        }
        newbox = createNewBoxFrom(box);
        syncBoxToProject(newbox, project);
        fadeOver(newbox, box);
      }

      function syncBarToProject(newbar, project) {
        // to be completed; just refresh for now.
      }
      
      function updateProgressStatus(project) {
        bar = $('#'+project.name+' progress-bg')
        if (bar.size() == 0) {
          //document.location.reload(true);
        }
        newbar = createNewBarFrom(bar);
        syncBarToProject(newbar, project);
        fadeOver(newbar, bar);
      }

      function updateProjectBoxWithFade(project) {
        updateBuildStatus(project);
        updateProgressStatus(project);
      };

      queue = new Queue(updateProjectBoxWithFade, runQueueIn);
      
      errorfunction = function() { 
          window.setTimeout('window.location.reload(true)', 10000);
          $('.server-closed').show();
        };
 
      $(document).ready(function(){
        ws = new WebSocket("ws://#{request.host}:8080/");
        ws.onmessage = function(evt) { 
          project = JSON.parse(evt.data);
          queue.push(project);
        }

        ws.onclose = errorfunction;
        ws.onerror = errorfunction;
        ws.onopen = function() { };

        queue.schedule(1000);
      });
      
      var displayCountdown = function(json) {
        var data = JSON.parse(json);
        $('#' + data.id + ' .display').text(data.description);
      }
      
    %link{:rel => 'stylesheet', :type => 'text/css', :href => "#{path_root}/main.css"}
  %body
    .server-closed
      Server connection problem: try a refresh.
    .projects
      - @projects.each do |name, project|
        %div{:class => "project", :id => name }
          %a{:class => project.status, :href => "/#{name}"}
            = name
            - if project.status == 'building'
              .last_author
                %img{:src => "#{path_root}/images/loading.gif"}
            - elsif !project.author.nil? && project.author != ""
              .last_author
                %img{:src => project.author_gravatar, :width => '50', :height => '50', :alt => project.author}
          - if project.progress
            .progress-bg
              - project.progress.each do |phase|
                %div{:class => "progress #{phase.name}", :style => "width:#{phase.adjust_width_to(300)}px"}
                  = phase.value
    .countdowns
      - @countdowns.each do |countdown|
        .countdown{:id => countdown.id}
          .display
            :javascript
              displayCountdown('#{countdown.to_json}');
          .configuration
            %form#countdown-configuration{:action => '/countdown', :method => 'post'}
              %input{:type => 'hidden', :name => '_method', :value => 'put'}
              %label{:for => "countdown-configuration-description"}
                = "Description"
              %input#countdown-configuration-description{:name => 'countdown[description]', :value => countdown.description}
              %label{:for => "countdown-configuration-date"}
                = "Target Time"
              = select_datetime(countdown.timestamp, {:order => [:day, :month, :year], :prefix => 'countdown'})
              %input{:type => 'submit', :value => 'Save'}
